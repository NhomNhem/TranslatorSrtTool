# translator.py
from deep_translator import GoogleTranslator, exceptions
from tkinter import messagebox  # Import ·ªü ƒë√¢y, v√¨ d√πng trong open_file
import os
import subprocess
import sys # Th√™m


def translate_line(translator, line, format_):
    """D·ªãch m·ªôt d√≤ng, x·ª≠ l√Ω c√°c tr∆∞·ªùng h·ª£p kh√°c nhau.

    Args:
        translator: ƒê·ªëi t∆∞·ª£ng GoogleTranslator.
        line: D√≤ng c·∫ßn d·ªãch.
        format_: ƒê·ªãnh d·∫°ng ph·ª• ƒë·ªÅ (".srt" ho·∫∑c ".ass").

    Returns:
        D√≤ng ƒë√£ d·ªãch, ho·∫∑c d√≤ng g·ªëc n·∫øu kh√¥ng c·∫ßn d·ªãch.
    """
    try:
        if format_ == ".srt":
            if "-->" not in line and not line.strip().isdigit() and line.strip() != "":
                translated_text = translator.translate(line.strip())
                return translated_text + "\n"
            else:
                return line
        elif format_ == ".ass":
            if "Dialogue:" in line:
                parts = line.split(",", 9)
                if len(parts) > 9:
                    text = parts[9].strip()
                    translated_text = translator.translate(text)
                    parts[9] = translated_text
                    return ",".join(parts)
            return line
        else:
            return line  # Tr∆∞·ªùng h·ª£p default

    except Exception as e:
        # X·ª≠ l√Ω l·ªói t·ªïng qu√°t, kh√¥ng c·∫ßn re-raise
        return line  # Ho·∫∑c c√≥ th·ªÉ return ""


def translate_subtitle(file_path, output_path, format_, color, progress_var, file_item_label, open_button,
                       stop_translation, paused, pause_event, root):
    """H√†m d·ªãch ph·ª• ƒë·ªÅ (ƒë∆∞·ª£c g·ªçi trong thread).

    Args:
        file_path: ƒê∆∞·ªùng d·∫´n ƒë·∫øn file ph·ª• ƒë·ªÅ g·ªëc.
        output_path: ƒê∆∞·ªùng d·∫´n ƒë·∫øn file ph·ª• ƒë·ªÅ ƒë·∫ßu ra.
        format_: ƒê·ªãnh d·∫°ng ph·ª• ƒë·ªÅ (".srt" ho·∫∑c ".ass").
        color: M√£ m√†u hex (v√≠ d·ª•: "#FFFFFF").
        progress_var: Bi·∫øn IntVar ƒë·ªÉ c·∫≠p nh·∫≠t ti·∫øn tr√¨nh.
        file_item_label: Label ƒë·ªÉ hi·ªÉn th·ªã tr·∫°ng th√°i d·ªãch.
        open_button: N√∫t ƒë·ªÉ m·ªü file sau khi d·ªãch xong.
        stop_translation: Bi·∫øn (global) ƒë·ªÉ d·ª´ng qu√° tr√¨nh d·ªãch.
        paused: Bi·∫øn (global) ƒë·ªÉ t·∫°m d·ª´ng qu√° tr√¨nh d·ªãch.
        pause_event: Event ƒë·ªÉ x·ª≠ l√Ω t·∫°m d·ª´ng/ti·∫øp t·ª•c.
        root: C·ª≠a s·ªï Tkinter g·ªëc.
    """

    translator = GoogleTranslator(source="en", target="vi")

    try:
        with open(file_path, "r", encoding="utf-8") as file:
            lines = file.readlines()
    except FileNotFoundError:
        file_item_label.config(text="‚ùå Kh√¥ng t√¨m th·∫•y", foreground="red")
        return
    except Exception as e:
        file_item_label.config(text="‚ùå L·ªói m·ªü file", foreground="red")
        return

    if not lines:
        file_item_label.config(text="‚ùå File r·ªóng", foreground="red")
        return

    translated_lines = []
    total_lines = len(lines)

    for i, line in enumerate(lines):
        if stop_translation:
            file_item_label.config(text="‚ùå D·ªãch b·ªã h·ªßy!", foreground="red")
            try:
                os.remove(output_path)
            except OSError:
                pass
            return

        if paused:
            file_item_label.config(text="‚è∏ T·∫°m d·ª´ng...", foreground="orange")
            pause_event.wait()
            file_item_label.config(text=f"üîÑ", foreground="#FFD700")

        try:
            translated_lines.append(translate_line(translator, line, format_))
        except Exception as e:
            file_item_label.config(text="‚ùå L·ªói d·ªãch", foreground="red")
            # C√≥ th·ªÉ log l·ªói e v√†o m·ªôt file, ho·∫∑c hi·ªÉn th·ªã chi ti·∫øt h∆°n n·∫øu c·∫ßn
            return

        progress_var.set(int((i + 1) / total_lines * 100))
        root.update_idletasks()

    # √Åp d·ª•ng m√†u (v√† ƒë·ªãnh d·∫°ng)
    final_lines = []
    for line in translated_lines:
        if format_ == ".srt":
            if "-->" not in line and not line.strip().isdigit() and line.strip() != "":
                final_lines.append(f"<font color='{color}'>{line.strip()}</font>\n")
            else:
                final_lines.append(line)
        elif format_ == ".ass":
            if "Dialogue:" in line:
                parts = line.split(",", 9)
                if len(parts) > 9:
                    parts[9] = parts[9].replace(r"{\c&H[0-9a-fA-F]+&}", "")
                    parts[9] = f"{{\\c&H{color[1:]}&}}{parts[9].strip()}"  # B·ªè #
                    final_lines.append(",".join(parts))
            else:  # Tr∆∞·ªùng h·ª£p default (kh√¥ng n√™n x·∫£y ra)
                final_lines.append(line)
        else:
            final_lines.append(line)

    try:
        with open(output_path, "w", encoding="utf-8") as file:
            file.writelines(final_lines)
        file_item_label.config(text="‚úÖ Ho√†n t·∫•t", foreground="green")
        open_button.config(state=tk.NORMAL, command=lambda p=output_path: open_file(p))
    except Exception as e:
        file_item_label.config(text="‚ùå L·ªói ghi file", foreground="red")
        return


def open_file(file_path):
    """M·ªü file b·∫±ng ·ª©ng d·ª•ng m·∫∑c ƒë·ªãnh."""
    try:
        if sys.platform == 'win32':
            os.startfile(file_path)  # Windows
        elif sys.platform == 'darwin':
            subprocess.call(('open', file_path))  # macOS
        else:
            subprocess.call(('xdg-open', file_path))  # Linux
    except Exception as e:
        messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ m·ªü file: {e}")